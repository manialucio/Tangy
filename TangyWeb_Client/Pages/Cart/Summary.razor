@page "/summary"
@using Microsoft.AspNetCore.Authorization
@using Tangy_Common
@inject ILocalStorageService _localStorage
@inject ICartService _cartService
@inject IJSRuntime _jsRuntime
@inject IOrderService _orderService
@inject NavigationManager _navigationManager;
@attribute [Authorize]
@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">

        <div class="row p-2 my-3">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-success ">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Order Summary</p></div>
                    <div class="col-4 p-0" style="text-align:right">
                        <a href="/cart" class="btn btn-secondary btn-block">Back to cart</a>
                    </div>
                </div>
                @foreach (var orderDetail in Order.OrderDetails)
                {
                    <div class="row border p-1 m-1">

                        <div class="col-3 col-md-2 ">
                            <img src="@orderDetail.Product.ImageUrl" width="100%">
                        </div>
                        <div class="col-5 col-md-5 ">
                            <span class="">Product : @orderDetail.ProductName </span><br />
                            <span class="pt-1">Size : @orderDetail.Size</span><br />
                            <span class="pt-1">Count : @orderDetail.Count</span><br />

                        </div>
                        <div class="col-4 col-md-5 " style="text-align:right;">
                            <h4 class="text-warning font-weight-bold pt-2">
                                USD
                                <span style="border-bottom:1px solid #ff6a00">
                                    @orderDetail.Count * @orderDetail.Price
                                </span>
                            </h4>
                        </div>
                    </div>
                }
                <div class="row" style="text-align:right">
                    <div class="col-12 px-3">
                        <h3> Order Total : <span class="text-secondary">@Order.OrderHeader.OrderTotal</span> </h3>
                    </div>
                </div>

            </div>

            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm Model="Order.OrderHeader" OnValidSubmit="HandleCheckOut" method="post">
                    <DataAnnotationsValidator />
                    <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Enter Details</p></div></div>

                    <div class="form-group pt-2">
                        <label class="text-warning">Name</label>
                        <InputText @bind-Value="@Order.OrderHeader.Name" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.Name"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Phone</label>
                        <InputText @bind-Value="@Order.OrderHeader.PhoneNumber" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.PhoneNumber"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Email</label>
                        <InputText @bind-Value="@Order.OrderHeader.EMail" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.EMail"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Street Address</label>
                        <InputText @bind-Value="@Order.OrderHeader.StreetAddress" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.StreetAddress"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">City</label>
                        <InputText @bind-Value="@Order.OrderHeader.City" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.City"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">State</label>
                        <InputText @bind-Value="@Order.OrderHeader.State" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.State"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Postal Code</label>
                        <InputText @bind-Value="@Order.OrderHeader.PostalCode" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.PostalCode"></ValidationMessage>
                    </div>


                    <div class="form-group pt-2">
                        <button type="submit" value="chkOut" class="btn btn-success form-control">Checkout Now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}




@code {


    public bool IsProcessing { get; set; } = false;
    private List<ShoppingCart> ShoppingCartItems { get; set; } = new();
    private List<ProductDto> Products { get; set; } = new();
    private OrderDto Order { get; set; } = null;

    private double Total { get; set; } = 0;

    private async Task HandleCheckOut()
    {
        var payment = new StripePaymentDto()
            {
                Order = Order
            };
        var result = await _orderService.Create(payment);
        if (result.OrderHeader.Id == 0)
        {
            await _jsRuntime.ToasterFail("errore");

        }
        else
        {
            await _jsRuntime.ToasterSucces("fatto");
            await _cartService.ClearCart();
            StateHasChanged();
           _navigationManager.NavigateTo("/"  );
        }

    }

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        ShoppingCartItems = await _cartService.GetCart();

        Order = new()
            {
                OrderHeader = new()
                {
                    OrderTotal = 0,
                    OrderDate = DateTime.Now,
                    Status = SD.OrderStatus.Pending,
                },
                OrderDetails = new List<OrderDetailDto>()

            };



        foreach (var cartItem in ShoppingCartItems)
        {
            var orderDetail = new OrderDetailDto()
                {
                    Count = cartItem.Count,
                    Id = 0,
                    OrderHeaderId = 0,
                    Price = cartItem.ProductPrice.Price,
                    Product = cartItem.Product,
                    ProductId = cartItem.ProductId,
                    ProductName = cartItem.Product.Name,
                    Size = cartItem.ProductPrice.Size
                };

            Order.OrderDetails.Add(orderDetail);
            Order.OrderHeader.OrderTotal += orderDetail.Count * orderDetail.Price;
        }

        var user = await _localStorage.GetItemAsync<UserDto>(SD.LocalStorage.UserDetails);
        if (user != null)
        {
            Order.OrderHeader.UserId = user.Id;
            Order.OrderHeader.Name = user.Name;
            Order.OrderHeader.EMail = user.Email;
            Order.OrderHeader.PhoneNumber = user.PhoneNumber;
        }
        IsProcessing = false;


    }
}
