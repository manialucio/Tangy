@page "/category/create"
@page "/category/edit/{id:int}"

@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title</h3>
    <div class="col-12">
        @if (IsLoading)
        {
            //  loading gif
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="Category" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <InputText @bind-Value="Category.Name"></InputText>
                    <ValidationMessage For="()=>Category.Name"></ValidationMessage>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="category" class="btn btn-secondary">Back to index</NavLink>
                </div>
            </EditForm>
        }

    </div>
</div>
@code {
    [Parameter]
    public int Id { get; set; }
    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                IsLoading = false;
            }
            else
            {
               await LoadCategory();

            }
        }

    }
    private async Task LoadCategory()
    {
        IsLoading = true;
        StateHasChanged();
        if (Id > 0)
        {
            Title = "Save edited";
            Category = await _categoryRepository.Get(Id);
        }
        IsLoading = false;
        StateHasChanged();
    }
    private CategoryDto Category { get; set; } = new CategoryDto();
    private string Title { get; set; } = "Create";

    private async Task UpsertCategory()
    {
        if (Id == 0)
        {
           await _categoryRepository.Create(Category);

        }
        else
        {
          await  _categoryRepository.Update(Category);
        }
        _navigationManager.NavigateTo("/category");
    }
}
